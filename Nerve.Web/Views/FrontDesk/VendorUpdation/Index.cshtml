@model Nerve.Web.ViewModels.VendorUpdateViewModel
@using Microsoft.AspNetCore.Http
@using Nerve.Common.Enums
@using Nerve.Common
@inject Nerve.Common.Translations.ILanguageTranslator _languageTranslator
@{
    var languageId = (LanguageType)ViewContext.HttpContext.Session.GetInt32(WebConstants.SessionKeys.Language);
    var persianFont = ViewContext.HttpContext.Session.GetString(WebConstants.SessionKeys.PersianFont);
    var resourceKeys = new List<string>
{
LanguageKeys.SearchCriteria,
LanguageKeys.ImeiNumber,
LanguageKeys.ImeiOrTrackingNumber,
LanguageKeys.Clear,
LanguageKeys.CollectionPoint,
LanguageKeys.TrackingNumber,
LanguageKeys.Product,
LanguageKeys.Brand,
LanguageKeys.Model,
LanguageKeys.CustomerName,
LanguageKeys.VendorRmaNumber,
LanguageKeys.LocationCode,
LanguageKeys.JobNumber,
LanguageKeys.VendorRmaUpdation,
LanguageKeys.ErrorFieldRequiredImeiNumber,
LanguageKeys.ErrorFieldRequiredImeiOrTrackingNumber,
LanguageKeys.SearchItemNotFound
};
    var translateItems = await _languageTranslator.TranslateManyAsync(resourceKeys, languageId);
}


<script>
    $(document).ready(function () {
        $("#imei-search").click(function () {
            searchImeiNumber();
        });

        //search imei enter event
        $("#search-imei-number").on('keyup', function (e) {
            if (e.keyCode == ENTER_KEYCODE) {
                searchImeiNumber();
            }
        });
    });

    function searchImeiNumber() {
            showSpinner();
            let _title = '@Html.Raw(translateItems[LanguageKeys.VendorRmaUpdation])';
            let _message = '';
            let number = $("#search-imei-number").val();
            if (number == undefined || number == '') {
                _message = '@Html.Raw(translateItems[LanguageKeys.ErrorFieldRequiredImeiOrTrackingNumber])';
                hideSpinner();
                showNotification(_title, _message, @Convert.ToInt32(NotificationType.Error), false);
                return;
            }

            $("#text-imei-number").val('');
            $("#text-tracking-number").val('');
            $("#product-name").val('');
            $("#brand-name").val('');
            $("#text-model").val('');
            $("#text-collection-point").val('');
            $("#text-location-code").val('');
            $("#text-job-number").val('');
            $("#text-customer-name").val('');
            $("#text-vendor-rma-number").val('');
            let url = '@Url.Action(WebConstants.PageRoute.Find, WebConstants.Controllers.VendorUpdation)/';
            $.ajax({
                'url': url + number,
                'type': 'GET',
                'async': false,
                'data': number,
                'dataType': 'application/json',
                complete: function (response) {
                    if (!!response && response.status == @StatusCodes.Status200OK) {
                        var vendor = JSON.parse(response.responseText);
                        $("#text-imei-number").val(vendor.imeiNumber);
                        $("#text-tracking-number").val(vendor.trackingNumber);
                        $("#product-name").val(vendor.productName);
                        $("#brand-name").val(vendor.brandName);
                        $("#text-model").val(vendor.model);
                        $("#text-collection-point").val(vendor.collectionPointName);
                        $("#text-location-code").val(vendor.locationCode);
                        $("#text-job-number").val(vendor.jobNumber);
                        $("#text-customer-name").val(vendor.customerName);
                        $("#text-vendor-rma-number").val(vendor.vendorRmaNumber);
                    } else {
                        _message = '@Html.Raw(translateItems[LanguageKeys.SearchItemNotFound])';
                        showNotification(_title, _message, @Convert.ToInt32(NotificationType.Error), false);
                    }
                    hideSpinner();
                }
            });
        }
</script>

<partial name="@WebConstants.ViewPage.Partial.Actions" model="@Model.PageActionBarModel" />
<div class="panel panel-default top-margin-10">
    <div class="panel-body">
        <b>@Html.Raw(translateItems[LanguageKeys.SearchCriteria])</b>
    </div>
    <div class="panel-body">
        <div class="row row-space">
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.ImeiOrTrackingNumber])
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.Search, new { @class = "form-control", @id = "search-imei-number" })
                <span id="imei-search" class="glyphicon glyphicon-search cursor form-control-feedback btn-primary"></span>
            </div>
        </div>
    </div>
</div>
<form asp-action="Update" asp-controller="VendorRmaUpdation"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-mode="replace"
      data-ajax-update="#ajaxpanel"
      id="vendor-updation-form">
    <div class="panel panel-default">
        <div id="ajaxpanel" class="panel-body">
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.TrackingNumber])
                </div>
                <div class="col-sm-4 has-feedback">
                    @Html.TextBoxFor(model => model.VendorUpdation.TrackingNumber, new { @class = "form-control", @id = "text-tracking-number", @readonly = "readonly" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.ImeiNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.ImeiNumber, new { @class = "form-control disabled", @id = "text-imei-number", @readonly = "readonly" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Product])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.ProductName, new { @class = "form-control", @id = "product-name", @readonly = "readonly" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Brand])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.BrandName, new { @class = "form-control", @id = "brand-name", @readonly = "readonly" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Model])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.Model, new { @class = "form-control", @id = "text-model", @readonly = "readonly" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.CollectionPoint])
                </div>
                <div class="col-sm-4 has-feedback">
                    @Html.TextBoxFor(model => model.VendorUpdation.CollectionPointName, new { @class = "form-control", @id = "text-collection-point", @readonly = "readonly" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.LocationCode])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.LocationCode, new { @class = "form-control", @id = "text-location-code", @readonly = "readonly" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.JobNumber])
                </div>
                <div class="col-sm-4 has-feedback">
                    @Html.TextBoxFor(model => model.VendorUpdation.JobNumber, new { @class = "form-control", @id = "text-job-number", @readonly = "readonly" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.CustomerName])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.CustomerName, new { @class = "form-control", @id = "text-customer-name", @readonly = "readonly" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.VendorRmaNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.VendorUpdation.VendorRmaNumber, new { @class = "form-control", @id = "text-vendor-rma-number" })
                </div>
            </div>
        </div>
    </div>
    <button type="submit" name="update-vendor-number" class="hidden"></button>
</form>
