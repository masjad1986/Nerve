@model Nerve.Web.ViewModels.DeviceViewModel
@using Microsoft.AspNetCore.Http
@using Nerve.Common.Enums
@using Nerve.Common
@inject Nerve.Common.Translations.ILanguageTranslator _languageTranslator

@{
    var languageId = (LanguageType)ViewContext.HttpContext.Session.GetInt32(WebConstants.SessionKeys.Language);
    var persianFont = ViewContext.HttpContext.Session.GetString(WebConstants.SessionKeys.PersianFont);
    var resourceKeys = new List<string>
{
LanguageKeys.SearchCriteria,
LanguageKeys.ImeiNumber,
LanguageKeys.Date,
LanguageKeys.Clear,
LanguageKeys.CollectionPoint,
LanguageKeys.TrackingNumber,
LanguageKeys.FaultCode,
LanguageKeys.FaultDetails,
LanguageKeys.Notes,
LanguageKeys.PhysicalCondition,
LanguageKeys.Product,
LanguageKeys.PopUpload,
LanguageKeys.FarsiName,
LanguageKeys.Brand,
LanguageKeys.Accessories,
LanguageKeys.PopDate,
LanguageKeys.ExpireDate,
LanguageKeys.Forwarder,
LanguageKeys.TransferTo,
LanguageKeys.WarrantyType,
LanguageKeys.ServiceCentre,
LanguageKeys.Type,
LanguageKeys.Model,
LanguageKeys.CustomerName,
LanguageKeys.CollectedDate,
LanguageKeys.LastName,
LanguageKeys.TelephoneNumber,
LanguageKeys.MobileNumber,
LanguageKeys.Email,
LanguageKeys.VendorRmaNumber,
LanguageKeys.PostalCode,
LanguageKeys.CustomerAddress,
LanguageKeys.NationalId,
LanguageKeys.EcoCode,
LanguageKeys.DeviceLogin,
LanguageKeys.ErrorFieldRequiredImeiNumber,
LanguageKeys.JobAlreadyOpenForImeiNumber,
LanguageKeys.DropDownSelectOption,
LanguageKeys.NoCollectionPointSelected,
LanguageKeys.ExceptionTitle,
LanguageKeys.ErrorFieldRequiredBrand,
LanguageKeys.ErrorFieldRequiredCollectionPoint,
LanguageKeys.ErrorFieldRequiredImeiNumber,
LanguageKeys.ErrorFieldRequiredPopDate,
LanguageKeys.ErrorFieldRequiredExpiryDate,
LanguageKeys.ErrorFieldRequiredTrackingNumber,
LanguageKeys.ErrorFieldRequiredTrackingDate,
LanguageKeys.ErrorFieldRequiredDeliveryAgent,
LanguageKeys.ErrorFieldRequiredWarrantyType,
LanguageKeys.ErrorFieldRequiredProduct,
LanguageKeys.ErrorFieldRequiredType,
LanguageKeys.ErrorFieldRequiredVendorRmaNumber,
LanguageKeys.ErrorFieldRequiredModel,
LanguageKeys.ErrorFieldRequiredPhysicalCondition,
LanguageKeys.ErrorFieldRequiredTransferTo,
LanguageKeys.ErrorFieldRequiredFaultCode,
LanguageKeys.ErrorFieldRequiredServiceCentre,
LanguageKeys.ErrorFieldRequiredFaultDetail,
LanguageKeys.ErrorFieldRequiredCustomerName,
LanguageKeys.ErrorFieldRequiredFarsiName,
LanguageKeys.ErrorFieldRequiredLastName,
LanguageKeys.ErrorFieldRequiredAccessories,
LanguageKeys.ErrorFieldRequiredEmail,
LanguageKeys.ErrorFieldInvalidEmail,
LanguageKeys.ErrorFieldRequiredMobileNumber,
LanguageKeys.ErrorFieldRequiredTelephone,
LanguageKeys.ErrorFieldRequiredEcoCode,
LanguageKeys.ErrorFieldRequiredNationalId,
LanguageKeys.ErrorFieldRequiredNotes,
LanguageKeys.ErrorFieldRequiredPostalCode,
LanguageKeys.ErrorFieldRequiredCustomerAddress,
LanguageKeys.ValidationFailureDescription
};
    var translateItems = await _languageTranslator.TranslateManyAsync(resourceKeys, languageId);
}

<script>
    $(document).ready(function () {
        raiseNotification('@Html.Raw(TempData[WebConstants.TempDataKeys.Notification])', true);

        $("#imei-search").click(function () {
            searchImeiNumber();
        });

        //search imei enter event
        $("#search-imei-number").on('keyup', function (e) {
            if (e.keyCode == ENTER_KEYCODE) {
                searchImeiNumber();
            }
        });

        //celar field
        $("#device-clear-button").on('click', function () {
            $("#search-imei-number").val('');
        });

        //device save click
        $("#device-save-click").on("click", function () {
            validate();
        });

        //prevent form default
        $("#device-form").on("keypress", function (event) {
            if (event.keyCode == ENTER_KEYCODE) {
                event.preventDefault();
                return;
            }
        });

        //save click
        $("#device-confirm-modal-yes").on("click", function () {
            $("#device-confirm-modal").modal('hide');
            $("#device-form").submit();
        });

        //pop date calender
        setCalender("#pop-date-calender", "#pop-date");

        //tracking date calender
        setCalender("#tracking-date-calender", "#tracking-date");

        //expiry date calender
        setCalender("#expiry-date-calender", "#expiry-date");

        $("#dropdown-product").on('change', function () {
            showSpinner();
            let url = '@Url.Action(WebConstants.PageRoute.GetBrandByProductName, "Brand")';
            let productName = $(this).find("option:selected").text();
            let productId = $(this).find("option:selected").val();
            $("#product-name").val(productName);
            let select = '@Html.Raw(await _languageTranslator.TranslateAsync(LanguageKeys.DropDownSelectOption))';
            $("#dropdown-brand").empty();
            $("#brand-name").val('');
            $("#dropdown-model").empty();
            $("#dropdown-transfer-to").empty();
            $("#dropdown-service-centre").empty();
            $("#dropdown-fault-code").empty();
            $("#multi-select-accessories").empty();
            $("#dropdown-model").append($("<option     />").val("-1").text(select));
            $("#dropdown-transfer-to").append($("<option     />").val("-1").text(select));
            $("#dropdown-service-centre").append($("<option     />").val("-1").text(select));
            $("#dropdown-fault-code").append($("<option     />").val("-1").text(select));

            if (!productId || productId < 0) {
                hideSpinner();
                return;
            }

            $.ajax({
                'url': url + '/' + productName,
                'type': 'GET',
                'async': false,
                'dataType': 'application/json',
                complete: function (response) {
                    $("#dropdown-brand").append($("<option     />").val("-1").text(select));
                    if (!!response && response.status == @StatusCodes.Status200OK) {
                        let items = JSON.parse(response.responseText);
                        if (items && items.length > 0) {
                            bindDropDown("#dropdown-brand", items, "code", "name");
                        }
                    } else {
                        var title = '@Html.Raw(translateItems[LanguageKeys.ExceptionTitle])';
                        showNotification(title, response.statusText,@Convert.ToInt32(NotificationType.Error), false);
                    }
                    hideSpinner();
                }
            });
        });

        $("#dropdown-brand").on('change', function () {
            bindOption();
        });

        $("#dropdown-brand").on('change', function () {
            bindOption();
        });

        $("#search-collection-point").click(function () {
            bindCollectionPoint();
        });

        $("#text-collection-point").on('keyup', function (e) {
            if (e.keyCode == ENTER_KEYCODE) {
                bindCollectionPoint();
            }
        });

        $("button[name=select-collection-point]").click(function () {
            let point = $('input[name=collection-point-radio]:checked');
            if (point && point.length > 0) {
                $("#collection-point-id").val(point.val());
                $("#text-collection-point").val(point.attr('title').trim());
                $("#collection-point-modal").modal('hide');
                let url = '@Url.Action(WebConstants.PageRoute.GetTrackingPrefix, "Device")';
                $.ajax({
                'url': url,
                'type': 'GET',
                'async': false,
                'dataType': 'application/json',
                complete: function (response) {
                    if (!!response && response.status == @StatusCodes.Status200OK) {
                        $("#tracking-number").val(response.responseText);
                    } else {
                        var title = '@Html.Raw(translateItems[LanguageKeys.ExceptionTitle])';
                        showNotification(title, response.statusText,@Convert.ToInt32(NotificationType.Error), false);
                    }
                    hideSpinner();
                }
            });
            } else {
                $("#collection-point-error").removeClass('hide');
            }
        });

        $("#close-collection-point-error").click(function() {
            $("#collection-point-error").addClass('hide');
        })

        function searchImeiNumber() {
            showSpinner();
            let _title = '@Html.Raw(translateItems[LanguageKeys.DeviceLogin])';
            let _message = '';
            let number = $("#search-imei-number").val();
            if (number == undefined || number == '') {
                _message = '@Html.Raw(translateItems[LanguageKeys.ErrorFieldRequiredImeiNumber])';
                hideSpinner();
                showNotification(_title, _message, @Convert.ToInt32(NotificationType.Error), false);
                return;
            }

            let url = '@WebConstants.PageRoute.DeviceAuthenticate/';
            $.ajax({
                'url': url + number,
                'type': 'GET',
                'async': false,
                'data': number,
                'dataType': 'application/json',
                complete: function (value) {
                    if (!!value && value.responseText == "false") {
                        $("#text-imei-number").val(number);
                    } else {
                        _message = '@Html.Raw(translateItems[LanguageKeys.JobAlreadyOpenForImeiNumber])';
                        showNotification(_title, _message, @Convert.ToInt32(NotificationType.Error), false);
                    }
                    hideSpinner();
                }
            });
        }

        function bindDropDown(selector, data, textColumn, valueColumn) {
            $.each(data, function (index) {
                let item = data[index];
                let value = item[valueColumn];
                let text = item[textColumn];
                $(selector).append($("<option     />").val(value).text(text));
            });
        }

        function bindCollectionPoint() {
            showSpinner();
            let searchValue = $("#text-collection-point").val();
            let url = `@Url.Action(WebConstants.PageRoute.DeviceCollectionPoint, "Device")`;
            if (!!searchValue)
                url = encodeURI(`${url}/${searchValue}`);
            $('#collection-point-partial').load(url, function () {
                $("#collection-point-modal").modal('show');
                $("#collection-point-error").addClass('hide');
                hideSpinner();
            });
        }

        function bindOption()
        {
            showSpinner();
            let url = '@Url.Action(WebConstants.PageRoute.GetOptionByBrandAndProductAndCollectionPoint, "Brand")';
            let collectionPoint = $("#collection-point-id").val();
            let brandName = $("#dropdown-brand").find("option:selected").text();
            let productName = $("#dropdown-product").find("option:selected").text();
            let select = '@Html.Raw(await _languageTranslator.TranslateAsync(LanguageKeys.DropDownSelectOption))';

            $("#brand-name").val(brandName);
            $("#dropdown-model").empty();
            $("#dropdown-transfer-to").empty();
            $("#dropdown-service-centre").empty();
            $("#dropdown-fault-code").empty();
            $("#multi-select-accessories").empty();

            $("#dropdown-model").append($("<option     />").val("-1").text(select));
            $("#dropdown-transfer-to").append($("<option     />").val("-1").text(select));
            $("#dropdown-service-centre").append($("<option     />").val("-1").text(select));
            $("#dropdown-fault-code").append($("<option     />").val("-1").text(select));
            $.ajax({
                'url': `${url}/${brandName}/${productName}/${!!collectionPoint ? collectionPoint : 0}`,
                'type': 'GET',
                'async': false,
                'dataType': 'application/json',
                complete: function (response) {
                    if (!!response && response.status == @StatusCodes.Status200OK) {
                        let item = JSON.parse(response.responseText);
                        if (item) {
                            if (item.models && item.models.length > 0)
                                bindDropDown("#dropdown-model", item.models, "name", "code");

                            if (item.faultCodes && item.faultCodes.length > 0)
                                bindDropDown("#dropdown-fault-code", item.faultCodes, "name", "code");

                            if (item.accessories && item.accessories.length > 0)
                                bindDropDown("#multi-select-accessories", item.accessories, "description", "id");

                            if (item.centres && item.centres.length > 0) {
                                bindDropDown("#dropdown-service-centre", item.centres, "locationName", "serviceCenterId");
                                bindDropDown("#dropdown-transfer-to", item.centres, "locationName", "serviceCenterId");
                            }
                        }
                    } else {
                        raiseNotification(response.responseText, true);
                    }
                    hideSpinner();
                }
            });
        }

        function validate() {
            let errors = [];
            $("#validation-summary-item").empty();

            let collectionPoint = $("#collection-point-id").val();
            if (!collectionPoint || collectionPoint == '0') errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredCollectionPoint]');

            let imeiNumber = $("#text-imei-number").val();
            if (checkNullOrEmpty(imeiNumber)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredImeiNumber]');

            let popDate = $("#pop-date").val();
            if (checkNullOrEmpty(popDate)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredPopDate]');

            let expiryDate = $("#expiry-date").val();
            if (checkNullOrEmpty(expiryDate)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredExpiryDate]');

            let trackingNumber = $("#tracking-number").val();
            if (checkNullOrEmpty(trackingNumber)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredTrackingNumber]');

            let trackingDate = $("#tracking-date").val();
            if (checkNullOrEmpty(trackingDate)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredTrackingDate]');

            let deliveryAgent = $("#dropdown-delivery-agent").val(); //dropdown
            if (!deliveryAgent || parseInt(deliveryAgent) <= 0) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredDeliveryAgent]');

            let warrantyType = $("#dropdown-warranty-type").val(); //dropdown
            if (!warrantyType || parseInt(warrantyType) <= 0) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredWarrantyType]');

            let product = $("#dropdown-product").val(); //dropdown
            if (!product || parseInt(product) <= 0) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredProduct]');

            let type = $("#dropdown-type").val();//dropdown
            if (!type || parseInt(type) <= 0) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredType]');

            let brand = $("#dropdown-brand").val();//dropdown
            if (checkNullOrEmpty(brand)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredBrand]');

            let vendorRmaNumber = $("#text-vendor-rma-number").val();
            if (checkNullOrEmpty(vendorRmaNumber)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredVendorRmaNumber]');

            let model = $("#dropdown-model").val(); //dropdown
            if (checkNullOrEmpty(model)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredModel]');

            let physicalCondition = $("#dropdown-physical-condition").val();
            if (checkNullOrEmpty(physicalCondition)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredPhysicalCondition]');

            let transferTo = $("#dropdown-transfer-to").val();
            if (checkNullOrEmpty(transferTo)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredTransferTo]');

            let faultCode = $("#dropdown-fault-code").val();
            if (checkNullOrEmpty(faultCode))errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredFaultCode]');

            let serviceCentre = $("#dropdown-service-centre").val();
            if (checkNullOrEmpty(serviceCentre)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredServiceCentre]');

            let faultDetail = $("#text-fault-detail").val();
            if (checkNullOrEmpty(faultDetail)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredFaultDetail]');

            let customerName = $("#text-customer-name").val();
            if (checkNullOrEmpty(customerName)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredCustomerName]');

            let farsiName = $("#text-farsi-name").val();
            if (checkNullOrEmpty(farsiName)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredFarsiName]');

            let lastName = $("#text-last-name").val();
            if (checkNullOrEmpty(lastName)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredLastName]');

            @*let accessories = $("#multi-select-accessories").val(); //multiselect
            if (!accessories || accessories.length < 1) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredAccessories]');*@

            let mobileNumber = $("#text-mobile-number").val();
            if (checkNullOrEmpty(mobileNumber)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredMobileNumber]');

            let email = $("#text-email").val();
            var emailPattern = /^\w+@@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/;
            if (email && !emailPattern.test(email)) errors.push('@translateItems[LanguageKeys.ErrorFieldInvalidEmail]');

            let ecocode = $("#text-ecocode").val();
            if (checkNullOrEmpty(ecocode)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredEcoCode]');

            let nationalId = $("#text-national-id").val();
            if (checkNullOrEmpty(nationalId)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredNationalId]');

            //let postalCode = $("#text-postal-code").val();
            let customerAddress = $("#text-customer-address").val();
            if (checkNullOrEmpty(customerAddress)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredCustomerAddress]');

            if (!!errors && errors.length > 0) {
                let errorHtml = "<div><b>@Html.Raw(translateItems[LanguageKeys.ValidationFailureDescription])</b><br><ul>";
                for (var i = 0; i < errors.length; i++) {
                    errorHtml += `<li class='red'>${errors[i]}</li>`;
                }
                errorHtml + "</ul></div>";
                $("#device-confirm-summary").empty();
                $("#device-confirm-modal").modal('hide');
                $("#validation-summary-item").html(errorHtml);
                $("#validation-summary-modal").modal('show');
            } else {
                $("#validation-summary-modal").modal('hide');
                $("#validation-summary-item").empty();
                $("#device-confirm-summary").empty();
                let confirmBodyHtml = "<ul>";

                confirmBodyHtml += "<li>@translateItems[LanguageKeys.CollectionPoint] : <b>" + $("#text-collection-point").val() + "</b></li>";
                confirmBodyHtml += "<li>@translateItems[LanguageKeys.ServiceCentre] : <b>" + $("#dropdown-service-centre").find("option:selected").text() + "</b></li>";
                confirmBodyHtml += "<li>@translateItems[LanguageKeys.Brand] : <b>" + $("#brand-name").val() + "</b></li>";
                confirmBodyHtml += "<li>@translateItems[LanguageKeys.Model] : <b>" + $("#dropdown-model").find("option:selected").text() + "</b></li>";
                confirmBodyHtml += "<li>@translateItems[LanguageKeys.ImeiNumber] : <b>" + $("#text-imei-number").val() + "</b></li>";
                confirmBodyHtml += "</ul>";

                $("#device-confirm-summary").html(confirmBodyHtml);
                $("#device-confirm-modal").modal('show');
            }
        }

        function checkNullOrEmpty(value) {
            return !value || value == "-1" || value.trim().length === 0;
        }
    });
</script>
<div class="panel panel-default top-margin-10">
    <div class="panel-body">
        <b>@Html.Raw(translateItems[LanguageKeys.SearchCriteria])</b>
    </div>
    <div class="panel-body">
        <div class="row row-space">
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.ImeiNumber])
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.ImeiNumber, new { @class = "form-control", @id = "search-imei-number" })
                <span id="imei-search" class="glyphicon glyphicon-search cursor form-control-feedback btn-primary"></span>
            </div>
            <button type="button" id="device-clear-button" class="btn btn-pr">@Html.Raw(translateItems[LanguageKeys.Clear]) </button>
        </div>
    </div>
</div>

<form asp-action="Save" asp-controller="Device"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-mode="replace"
      data-ajax-update="#ajaxpanel"
      id="device-form">
    <div class="panel panel-default">
        <div id="ajaxpanel" class="panel-body">
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.CollectionPoint])
                </div>
                <div class="col-sm-4 has-feedback">
                    @Html.ValidationMessageFor(model => model.Device.CollectionPoint, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Device.CollectionPoint, new { @id = "collection-point-id" })
                    @Html.TextBoxFor(model => model.Device.CollectionPointName, new { @class = "form-control", @id = "text-collection-point" })
                    <span id="search-collection-point" class="glyphicon glyphicon-search cursor form-control-feedback btn-primary"></span>
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.ImeiNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.ImeiNumber, new { @class = "form-control disabled", @id = "text-imei-number" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.PopDate])
                </div>
                <div class="col-sm-4">
                    <div class='input-group date'>
                        @Html.TextBoxFor(model => model.Device.PopDate, new { @class = "form-control", @id = "pop-date", @readonly = "readonly" })
                        <span class="input-group-addon cursor" id="pop-date-calender">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.ExpireDate])
                </div>
                <div class="col-sm-4">
                    <div class='input-group date'>
                        @Html.TextBoxFor(model => model.Device.ExpiryDate, new { @class = "form-control", @id = "expiry-date", @readonly = "readonly" })
                        <span class="input-group-addon cursor" id="expiry-date-calender">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.TrackingNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.TrackingNumber, new { @class = "form-control", @id = "tracking-number", @readonly = "readonly" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Date])
                </div>
                <div class="col-sm-4">
                    <div class='input-group date'>
                        @Html.TextBoxFor(model => model.Device.TrackingDate, new { @class = "form-control", @id = "tracking-date" })
                        <span span class="input-group-addon cursor" id="tracking-date-calender">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Forwarder])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.Forwarder, new SelectList(Model.DeliveryAgentItems, "Value", "Text"), "Select...", new { @id = "dropdown-delivery-agent", @class = "form-control disabled", })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.WarrantyType])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.WarrantyType, new SelectList(Model.WarrantyTypeItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-warranty-type" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Product])
                </div>
                <div class="col-sm-4">
                    @Html.HiddenFor(model => model.Device.ProductName, new { @id = "product-name" })
                    @Html.DropDownListFor(model => model.Device.Product, new SelectList(Model.ProductItems, "Value", "Text"), "Select...", new { @class = "form-control disabled", @id = "dropdown-product" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Type])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.Type, new SelectList(Model.TypeItems, "Value", "Text"), "Select...", new { @class = "form-control disabled", @id = "dropdown-type" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Brand])
                </div>
                <div class="col-sm-4">
                    @Html.HiddenFor(model => model.Device.BrandName, new { @id = "brand-name" })
                    @Html.DropDownListFor(model => model.Device.BrandCode, new SelectList(Model.BrandItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-brand" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.VendorRmaNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.VendorRmaNumber, new { @class = "form-control", @id = "text-vendor-rma-number" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Model])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.Model, new SelectList(Model.ModelItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-model" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.PhysicalCondition])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.PhysicalCondition, new SelectList(Model.PhysicalConditionItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-physical-condition" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.TransferTo])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.TransferTo, new SelectList(Model.TransferItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-transfer-to" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.FaultCode])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.FaultCode, new SelectList(Model.FaultCodeItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-fault-code" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.ServiceCentre])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Device.ServiceCentre, new SelectList(Model.ServiceCentreItems, "Value", "Text"), "Select...", new { @class = "form-control", @id = "dropdown-service-centre" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.FaultDetails])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.FaultDetail, new { @class = "form-control", @id = "text-fault-detail" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.CustomerName])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.CustomerName, new { @class = "form-control", @id = "text-customer-name" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.FarsiName])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.FarsiName, new { @class = "form-control", @id = "text-farsi-name" })
                </div>
            </div>

            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.LastName])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.LastName, new { @class = "form-control", @id = "text-last-name" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Email])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.Email, new { @class = "form-control", @id = "text-email" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.MobileNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.MobileNumber, new { @class = "form-control", @id = "text-mobile-number", maxlength = "13" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.EcoCode])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.EcoCode, new { @class = "form-control", @id = "text-ecocode" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.TelephoneNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.TelephoneNumber, new { @class = "form-control", @id = "text-telephone" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Notes])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.Notes, new { @class = "form-control", @id = "text-notes" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.NationalId])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.NationalId, new { @class = "form-control", @id = "text-national-id" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.PostalCode])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.PostalCode, new { @class = "form-control", @id = "text-postal-code" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.CustomerAddress])
                </div>
                <div class="col-sm-4">
                    @Html.TextAreaFor(model => model.Device.CustomerAddress, new { @class = "form-control", @id = "text-customer-address" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Accessories])
                </div>
                <div class="col-sm-4">
                    @Html.ListBoxFor(model => model.Device.AccessoriesIds, new SelectList(Model.AccessoryItems, "Value", "Text"), new { @class = "form-control", @id = "multi-select-accessories" })
                </div>
            </div>
            <div class="row row-space hidden">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.PopUpload])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Device.PopUploadPath, new { @class = "form-control hidden" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                </div>
                <div class="col-sm-4">
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="collection-point-modal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <span class="modal-title model-title-header">@Html.Raw(translateItems[LanguageKeys.CollectionPoint])</span>
                </div>
                <div class="modal-body popup-grid-container">
                    <div id="collection-point-error" class="alert alert-danger hide">
                        <button type="button" id="close-collection-point-error" class="close" aria-hidden="true">
                            &times;
                        </button>
                        <span class="glyphicon glyphicon-remove-circle red">
                        </span>
                        <span class="@persianFont">
                            @translateItems[LanguageKeys.NoCollectionPointSelected]
                        </span>
                    </div>
                    <div id="collection-point-partial"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" name="select-collection-point" id="select-collection-point">Select</button>
                </div>
            </div>
        </div>
    </div>

    <button type="submit" name="save-device" class="hidden"></button>
</form>