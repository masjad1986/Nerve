@model Nerve.Repository.Dtos.JobGridDto
@using Microsoft.AspNetCore.Http
@using Nerve.Common.Enums
@using Nerve.Common
@using NonFactors.Mvc.Grid
@inject Nerve.Common.Translations.ILanguageTranslator _languageTranslator
@{
    var languageId = (LanguageType)ViewContext.HttpContext.Session.GetInt32(WebConstants.SessionKeys.Language);
    var persianFont = ViewContext.HttpContext.Session.GetString(WebConstants.SessionKeys.PersianFont);
    var resourceKeys = new List<string>
{
LanguageKeys.Brand,
LanguageKeys.ExceptionTitle,
LanguageKeys.ImeiHistory,
LanguageKeys.JobNumber,
LanguageKeys.Model,
LanguageKeys.NoRecodsAvaiable,
LanguageKeys.Product,
LanguageKeys.TrackingNumber,
LanguageKeys.VendorRmaNumber
};
    var translateItems = await _languageTranslator.TranslateManyAsync(resourceKeys, languageId);
}

<script>
    $(document).ready(function () {
        $(".mvc-grid-pager > button").on("click", function () {
            if ($(this).hasClass('disabled'))
                return;

            let pageIndex = $(this).data("page");
            let pageSize = $(".mvc-grid-pager-rows").val();

            if (!pageIndex || parseInt(pageIndex) === 0)
                pageIndex = 1;

            changePage(pageIndex, pageSize);
        });

        $(".mvc-grid-pager-rows").on("change", function () {
            let pageIndex = $(".mvc-grid-pager > button.active").data("page");
            let pageSize = $(this).val();

            if (!pageIndex || parseInt(pageIndex) === 0)
                pageIndex = 1;

            changePage(pageIndex, pageSize);
        });

        function changePage(pageIndex, pageSize) {
            showSpinner();
            let locationCode = $("#search-location-code").val();
            let searchValue = $("#search-job-number").val();
            let url = `@Url.Action(WebConstants.PageRoute.GetJobByLocation, WebConstants.Controllers.Job)/${encodeURI(locationCode)}`;
            if (!!searchValue)
                url = encodeURI(`${url}/${searchValue}`);

            $.ajax({
                'url': url,
                'type': 'GET',
                'async': false,
                'dataType': 'application/json',
                'data': { 'pageSize' : pageSize, 'pageIndex': pageIndex },
                complete: function (response) {
                    if (!!response && response.status == @StatusCodes.Status200OK) {
                        $("#job-grid").html(response.responseText);
                    }
                    else {
                        var title = '@Html.Raw(translateItems[LanguageKeys.ExceptionTitle])';
                        showNotification(title, response.statusText,@Convert.ToInt32(NotificationType.Error), false);
                    }
                    hideSpinner();
                }
            });
        }
    });

</script>
<div class="panel-body" id="job-grid">
    @Html.HiddenFor(model => model.JobNumber, new { id = "search-job-number" })
    @Html.HiddenFor(model => model.LocationCode, new { id = "search-location-code" })
    @(Html.Grid(Model.DataSource)
        .Build(columns =>
        {
            if (Model.AllowMultipleSelection)
            {
                columns.Add(model => Html.CheckBox("checkbox", new { @value = model.JobNumber, @class = "job-grid-checkbox" })).
                                Titled(Html.CheckBox("checkbox", new { @class = "job-grid-header-checkbox" }));
            } else
            {
                columns.Add(model => Html.RadioButton("radio", model.JobNumber, new { @class = "job-grid-radio" })).
                                Titled("#");
            }
            columns.Add(model => model.JobNumber).Titled(translateItems[LanguageKeys.JobNumber]);
            columns.Add(model => model.TrackingNumber).Titled(translateItems[LanguageKeys.ImeiHistory]);
            columns.Add(model => model.TrackingNumber).Titled(translateItems[LanguageKeys.TrackingNumber]);
            columns.Add(model => model.RmaNumber).Titled(translateItems[LanguageKeys.VendorRmaNumber]);
            columns.Add(model => model.ProductName).Titled(translateItems[LanguageKeys.Product]);
            columns.Add(model => model.Brand).Titled(translateItems[LanguageKeys.Brand]);
            columns.Add(model => model.Model).Titled(translateItems[LanguageKeys.Model]);
        })
        .Empty(translateItems[LanguageKeys.NoRecodsAvaiable])
        .Filterable()
        .Sortable()
        .Pageable(pager =>
        {
            pager.PageSizes = Model.PageSizes;
            pager.ShowPageSizes = true;
            pager.RowsPerPage = Model.Pagination.PageSize;
            pager.CurrentPage = Model.Pagination.PageIndex;
            pager.TotalRows = Model.Count;
        })
    )
</div>