@model Nerve.Web.ViewModels.DispatchNoteViewModel
@using Microsoft.AspNetCore.Http
@using Nerve.Common.Enums
@using Nerve.Common
@inject Nerve.Common.Translations.ILanguageTranslator _languageTranslator
@{
    var languageId = (LanguageType)ViewContext.HttpContext.Session.GetInt32(WebConstants.SessionKeys.Language);
    var persianFont = ViewContext.HttpContext.Session.GetString(WebConstants.SessionKeys.PersianFont);
    var resourceKeys = new List<string>
{
        LanguageKeys.AirwayBillNumber,
LanguageKeys.DispatchNote,
LanguageKeys.Forwarder,
LanguageKeys.InvoiceNumber,
LanguageKeys.InvoiceDate,
LanguageKeys.ImeiNumber,
LanguageKeys.ImeiOrTrackingNumber,
LanguageKeys.ErrorFieldRequiredImeiNumber,
LanguageKeys.ErrorFieldRequiredImeiOrTrackingNumber,
LanguageKeys.SearchItemNotFound,
LanguageKeys.ValidationFailureSummary,
LanguageKeys.ValidationFailureDescription
};
    var translateItems = await _languageTranslator.TranslateManyAsync(resourceKeys, languageId);
}

<script>
    $(document).ready(function () {
        raiseNotification('@Html.Raw(TempData[WebConstants.TempDataKeys.Notification])', true);

        //invoice date calender
        setCalender("#invoice-date-calender", "#text-invoice-date");

        $("#imei-search-click").click(function () {
            searchInvoices()();
        });

        //search imei enter event
        $("#search-imei-number").on('keyup', function (e) {
            if (e.keyCode == ENTER_KEYCODE) {
                searchInvoices()();
            }
        });

        //device save click
        $("#@Model.PageActionBarModel.ActionPrefix-save-click").on("click", function () {
            let errors = [];
            let imeiNumber = $("#text-imei-number").val();

            @*let trackingNumber = $("#tracking-number").val();
            if (checkNullOrEmpty(trackingNumber) && checkNullOrEmpty(imeiNumber)) {
                errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredImeiOrTrackingNumber]');
            }*@

            @*let vendorRmaNumber = $("#text-vendor-rma-number").val();
            if (checkNullOrEmpty(vendorRmaNumber)) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredVendorRmaNumber]');*@


            if (!!errors && errors.length > 0) {
                let errorHtml = "<div><b>@Html.Raw(translateItems[LanguageKeys.ValidationFailureDescription])</b><br><ul>";
                for (var i = 0; i < errors.length; i++) {
                    errorHtml += `<li class='red'>${errors[i]}</li>`;
                }
                errorHtml + "</ul></div>";
                $("#validation-summary-item").html(errorHtml);
                $("#validation-summary-modal").modal('show');
            } else {
                $("#validation-summary-modal").modal('hide');
                $("#validation-summary-item").empty();
                $("#vendor-updation-form").submit();
            }
        });

        //prevent form default
        $("#vendor-updation-form").on("keypress", function (event) {
            if (event.keyCode == ENTER_KEYCODE) {
                event.preventDefault();
                return;
            }
        });

    });

    function searchInvoices() {
        showSpinner();
        let _title = '@Html.Raw(translateItems[LanguageKeys.DispatchNote])';
        let _message = '';
        let number = $("#search-imei-number").val();
        if (number == undefined || number == '') {
            _message = '@Html.Raw(translateItems[LanguageKeys.ErrorFieldRequiredImeiNumber])';
            hideSpinner();
            showNotification(_title, _message, @Convert.ToInt32(NotificationType.Error), false);
            return;
        }

        clearVendorInformation();
        let url = '@Url.Action(WebConstants.PageRoute.Find, WebConstants.Controllers.Invoice)/';
        $.ajax({
            'url': url + number,
            'type': 'GET',
            'async': true,
            'data': number,
            'dataType': 'application/json',
            complete: function (response) {
                if (!!response && response.status == @StatusCodes.Status200OK) {
                    var vendor = JSON.parse(response.responseText);
                    setVendorInformation(vendor);
                } else {
                    _message = '@Html.Raw(translateItems[LanguageKeys.SearchItemNotFound])';
                    showNotification(_title, _message, @Convert.ToInt32(NotificationType.Error), false);
                }
                hideSpinner();
            }
        });
    }
</script>

<partial name="@WebConstants.ViewPage.Partial.Actions" model="@Model.PageActionBarModel" />
<form asp-action="@WebConstants.PageRoute.Save" asp-controller="@WebConstants.Controllers.Invoice"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-mode="replace"
      data-ajax-update="#ajaxpanel"
      id="dipatch-note-form">
    <div class="panel panel-default">
        <div id="ajaxpanel" class="panel-body">
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.InvoiceNumber])
                </div>
                <div class="col-sm-4 has-feedback">
                    @Html.TextBoxFor(model => model.DispatchNote.InvoiceNumber, new { @class = "form-control", @id = "text-invoice-number" })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.InvoiceDate])
                </div>
                <div class="col-sm-4">
                    <div class='input-group date'>
                        @Html.TextBoxFor(model => model.DispatchNote.InvoiceDate, new { @class = "form-control", @id = "text-invoice-date", @readonly = "readonly" })
                        <span span class="input-group-addon cursor" id="invoice-date-calender">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.Forwarder])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.DispatchNote.DeliveryAgent, new SelectList(Model.DeliveryAgentItems, "Value", "Text"), "Select...", new { @id = "dropdown-delivery-agent", @class = "form-control disabled", })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.ImeiOrTrackingNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.ImeiOrTrackingNumber, new { @class = "form-control disabled", @id = "search-imei-number", @readonly = "readonly" })
                    <span id="imei-search-click" class="glyphicon glyphicon-search cursor form-control-feedback btn-primary"></span>
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.AirwayBillNumber])
                </div>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.DispatchNote.AirwayBillNumber, new SelectList(Model.AirwayBillItems, "Value", "Text"), "Select...", new { @id = "dropdown-airway-bill-number", @class = "form-control disabled", })
                </div>
            </div>
            @*<div class="row row-space">
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.Model])
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorUpdation.Model, new { @class = "form-control", @id = "text-model", @readonly = "readonly" })
            </div>
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.CollectionPoint])
            </div>
            <div class="col-sm-4 has-feedback">
                @Html.TextBoxFor(model => model.VendorUpdation.CollectionPointName, new { @class = "form-control", @id = "text-collection-point", @readonly = "readonly" })
            </div>
        </div>
        <div class="row row-space">
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.LocationCode])
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorUpdation.LocationCode, new { @class = "form-control", @id = "text-location-code", @readonly = "readonly" })
            </div>
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.JobNumber])
            </div>
            <div class="col-sm-4 has-feedback">
                @Html.TextBoxFor(model => model.VendorUpdation.JobNumber, new { @class = "form-control", @id = "text-job-number", @readonly = "readonly" })
            </div>
        </div>
        <div class="row row-space">
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.CustomerName])
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorUpdation.CustomerName, new { @class = "form-control", @id = "text-customer-name", @readonly = "readonly" })
            </div>
            <div class="col-sm-2 text-right @persianFont">
                @Html.Raw(translateItems[LanguageKeys.VendorRmaNumber])
            </div>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorUpdation.VendorRmaNumber, new { @class = "form-control", @id = "text-vendor-rma-number" })
            </div>
        </div>*@
        </div>
    </div>
    <button type="submit" name="dispatch-note-save" class="hidden"></button>
</form>
<partial name="@WebConstants.ViewPage.Partial.ValidationSummary" model="@translateItems[LanguageKeys.ValidationFailureSummary]" />
