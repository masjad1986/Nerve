@model Nerve.Web.ViewModels.DispatchNoteViewModel
@using Microsoft.AspNetCore.Http
@using Nerve.Common.Enums
@using Nerve.Common
@using NonFactors.Mvc.Grid
@inject Nerve.Common.Translations.ILanguageTranslator _languageTranslator
@{
    var languageId = (LanguageType)ViewContext.HttpContext.Session.GetInt32(WebConstants.SessionKeys.Language);
    var persianFont = ViewContext.HttpContext.Session.GetString(WebConstants.SessionKeys.PersianFont);
    var resourceKeys = new List<string>
{
LanguageKeys.TrackingNumber,
LanguageKeys.LocationCode,
LanguageKeys.JobNumber,
LanguageKeys.SwapImeiNumber,
LanguageKeys.Product,
LanguageKeys.Brand,
LanguageKeys.Model,
LanguageKeys.Clear,
LanguageKeys.Delivery,
LanguageKeys.ShipmentDetails,
LanguageKeys.AllocatedTo,
LanguageKeys.RmaReference,
LanguageKeys.Warranty,
LanguageKeys.LoginType,
LanguageKeys.Cost,
LanguageKeys.AirwayBillNumber,
LanguageKeys.Amount,
LanguageKeys.DeliveredDate,
LanguageKeys.DispatchNote,
LanguageKeys.Forwarder,
LanguageKeys.Find,
LanguageKeys.Invoices,
LanguageKeys.InvoiceNumber,
LanguageKeys.InvoiceDate,
LanguageKeys.ImeiNumber,
LanguageKeys.ImeiOrTrackingNumber,
LanguageKeys.ErrorFieldRequiredImeiNumber,
LanguageKeys.ErrorFieldRequiredImeiOrTrackingNumber,
LanguageKeys.ErrorFieldRequiredInvoiceNumber,
LanguageKeys.ErrorFieldRequiredAllocatedTo,
LanguageKeys.ErrorFieldSelectionRequired,
LanguageKeys.SearchItemNotFound,
LanguageKeys.SelectAll,
LanguageKeys.NoRecodsAvaiable,
LanguageKeys.TotalQuantity,
LanguageKeys.Remarks,
LanguageKeys.ValidationFailureSummary,
LanguageKeys.ValidationFailureDescription,
LanguageKeys.UnselectAll
};
    var translateItems = await _languageTranslator.TranslateManyAsync(resourceKeys, languageId);
}

<script>
    $(document).ready(function () {
        raiseNotification('@Html.Raw(TempData[WebConstants.TempDataKeys.Notification])', true);

        //invoice date calender
        setCalender("#invoice-date-calender", "#text-invoice-date");

        //delivery date calender
        setCalender("#delivery-date-calender", "#text-delivery-date");

        $("#invoice-search-click").click(function () {
            searchInvoices();
        });

        //search imei enter event
        $("#text-invoice-number").on('keyup', function (e) {
            if (e.keyCode == ENTER_KEYCODE) {
                searchInvoices()();
            }
        });

        $("button[name=select-invoice]").click(function () {
            let point = $('input[name=invoice-radio]:checked');
            if (point && point.length > 0) {
                $("#text-invoice-number").val(point.attr('title').trim());

                let item = JSON.parse(point.data("item"));
                if (item) {
                    $("#text-delivery-date").val(item.invoiceDate);
                    $("#text-airway-bill-number").val(item.airwayBillNumber);
                }
                $("#invoice-modal").modal('hide');
            } else {
                $("#invoice-error").removeClass('hide');
            }
        });

        $("#close-invoice-error").click(function () {
            $("#invoice-error").addClass('hide');
        })

        //select all or unselect all
        $(".dispatch-note-grid-header-checkbox").on("click", function () {
            let checked = $(this).prop("checked") === true;
            let count = $('input.dispatch-note-grid-checkbox').length;
            $('input#checkbox.dispatch-note-grid-checkbox').prop('checked', );
            $("#text-quantity").val(count > 0 && checked ? count : '');
            checkboxSelection();
        });

        //grid checkbox selection
        $('input.dispatch-note-grid-checkbox').on("click", function () {
            let checkedAll = $('input.dispatch-note-grid-checkbox').length == $('input.dispatch-note-grid-checkbox:checked').length;
            $(".dispatch-note-grid-header-checkbox").prop("checked", checkedAll);
            let gridCheckbox = $('input.dispatch-note-grid-checkbox:checked').length;
            $("#text-quantity").val(gridCheckbox > 0 ? gridCheckbox : '');
            checkboxSelection();
        });

        function checkboxSelection() {
            let multiselect = $("#multiselect-tracking-number");
            if (multiselect)
                multiselect.empty();

            let items = $('input.dispatch-note-grid-checkbox:checked');
            if (items) {
                items.each((index, item) => {
                    multiselect.append(`<option selected ="true" value='${item.value}'>${item.value}</option>`);
                });
            }
        }

        //dispatch find click
        $("#dispatch-find-button").on("click", function () {
            $("#is-save-request-type").val(false);
            $("#dispatch-note-form").submit();
        })

        //dispatch save click
        $("#@Model.PageActionBarModel.ActionPrefix-save-click").on("click", function () {
            let errors = [];
            $("#is-save-request-type").val(true);
            let imeiNumber = $("#text-imei-number").val();

            let invoiceNumber = $("#text-invoice-number").val();
            if (checkNullOrEmpty(invoiceNumber) && checkNullOrEmpty(invoiceNumber)) {
                errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredInvoiceNumber]');
            }

            let deliveryAgent = $("#dropdown-delivery-agent").val(); //dropdown
                if (!deliveryAgent || parseInt(deliveryAgent) <= 0) errors.push('@translateItems[LanguageKeys.ErrorFieldRequiredAllocatedTo]');

            let quantity = $("#text-quantity").val();
            if (checkNullOrEmpty(quantity) || parseInt(quantity) === 0) {
                errors.push('@translateItems[LanguageKeys.ErrorFieldSelectionRequired]');
            }

            if (!!errors && errors.length > 0) {
                let errorHtml = "<div><b>@Html.Raw(translateItems[LanguageKeys.ValidationFailureDescription])</b><br><ul>";
                for (var i = 0; i < errors.length; i++) {
                    errorHtml += `<li class='red'>${errors[i]}</li>`;
                }
                errorHtml + "</ul></div>";
                $("#validation-summary-item").html(errorHtml);
                $("#validation-summary-modal").modal('show');
            } else {
                $("#validation-summary-modal").modal('hide');
                $("#validation-summary-item").empty();
                $("#dispatch-note-form").submit();
            }
        });

        //prevent form default
        $("#dispatch-note-form").on("keypress", function (event) {
            if (event.keyCode == ENTER_KEYCODE) {
                event.preventDefault();
                return;
            }
        });


        //dropdown-delivery-agent
        $("#dropdown-delivery-agent").on("change", function () {
            let value = $(this).val();

            if (isNullOrUndefined(value) || value > 0) {
                $("text-delivery-agent-name").val('');
            } else {
                $("text-delivery-agent-name").val($(this).text());
            }
        })
    });

    function searchInvoices() {
        showSpinner();
        let searchValue = $("#text-invoice-number").val();
        let url = `@Url.Action(WebConstants.PageRoute.Find, WebConstants.Controllers.Invoice)`;
        if (!!searchValue)
            url = encodeURI(`${url}/${searchValue}`);
        $('#invoice-partial').load(url, function () {
            $("#invoice-modal").modal('show');
            $("#invoice-error").addClass('hide');
            hideSpinner();
        });
    }

    function itemSelection(selected) {

    }
</script>

<partial name="@WebConstants.ViewPage.Partial.Actions" model="@Model.PageActionBarModel" />
<form asp-action="@WebConstants.PageRoute.DispatchNote" asp-controller="@WebConstants.Controllers.Invoice"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-mode="replace"
      data-ajax-update="#ajaxpanel"
      id="dispatch-note-form">
    <div class="panel panel-default">
        <div id="ajaxpanel" class="panel-body">
            @Html.HiddenFor(model => model.IsSaveRequest, new { @id = "is-save-request-type" })
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.InvoiceNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.DispatchNote.InvoiceNumber, new { @class = "form-control", @id = "text-invoice-number", @type = "number" })
                    <span id="invoice-search-click" class="glyphicon glyphicon-search cursor form-control-feedback btn-primary">
                    </span>
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.InvoiceDate])
                </div>
                <div class="col-sm-4">
                    <div class='input-group date'>
                        @Html.TextBoxFor(model => model.DispatchNote.InvoiceDate, new { @class = "form-control", @id = "text-invoice-date", @readonly = "readonly" })
                        <span span class="input-group-addon cursor" id="invoice-date-calender">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.AllocatedTo])
                </div>
                <div class="col-sm-4">
                    @Html.HiddenFor(model => model.DispatchNote.DeliveryAgentName, new { @id = "text-delivery-agent-name" })
                    @Html.DropDownListFor(model => model.DispatchNote.DeliveryAgent, new SelectList(Model.DeliveryAgentItems, "Value", "Text"), "Select...", new { @id = "dropdown-delivery-agent", @class = "form-control disabled", })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.DeliveredDate])
                </div>
                <div class="col-sm-4">
                    <div class='input-group date'>
                        @Html.TextBoxFor(model => model.DispatchNote.DeliveryDate, new { @class = "form-control", @id = "text-delivery-date", @readonly = "readonly" })
                        <span span class="input-group-addon cursor" id="delivery-date-calender">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.AirwayBillNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.DispatchNote.AirwayBillNumber, new { @id = "text-airway-bill-number", @class = "form-control", })
                </div>
                <div class="col-sm-2 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.ImeiOrTrackingNumber])
                </div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.ImeiOrTrackingNumber, new { @class = "form-control disabled", @id = "imei-tracking-number" })
                </div>
            </div>
            <div class="row row-space">
                <div class="col-sm-6 text-right @persianFont">
                </div>
                <div class="col-sm-6 text-right @persianFont">
                    <button type="button" id="dispatch-find-button" class="btn btn-primary">@Html.Raw(translateItems[LanguageKeys.Find]) </button>
                    <button type="button" id="dispatch-clear-button" class="btn btn-pr">@Html.Raw(translateItems[LanguageKeys.Clear]) </button>
                </div>
            </div>
        </div>
    </div>

    <div id="invoice-grid" class="panel panel-default">
        <div class="panel-body">
            <div class="row row-space">
                <div class="col-sm-12">
                    <div class="row row-space">
                        <div class="col-sm-12">
                            @Html.ListBoxFor(model => model.DispatchNote.SelectedTrackingNumbers, new List<SelectListItem>(), new { @id = "multiselect-tracking-number", @class = "hidden" })
                            @*@if (Model.Devices != null && Model.Devices.Any())
                                {*@
                            @(Html.Grid(Model.Devices)
                                                .Build(columns =>
                                                {
                                                    columns.Add(model => Html.CheckBox("checkbox", new { @value = model.TrackingNumber, @class = "dispatch-note-grid-checkbox" })).Titled(Html.CheckBox("checkbox", new { @class = "dispatch-note-grid-header-checkbox" }));
                                                    columns.Add(model => model.TrackingNumber).Titled(translateItems[LanguageKeys.TrackingNumber]);
                                                    columns.Add(model => model.LocationCode).Titled(translateItems[LanguageKeys.LocationCode]);
                                                    columns.Add(model => model.JobNumber).Titled(translateItems[LanguageKeys.JobNumber]);
                                                    columns.Add(model => model.ImeiNumber).Titled(translateItems[LanguageKeys.ImeiNumber]);
                                                    columns.Add(model => model.SwapImeiNumber).Titled(translateItems[LanguageKeys.SwapImeiNumber]);
                                                    columns.Add(model => model.ProductName).Titled(translateItems[LanguageKeys.Product]);
                                                    columns.Add(model => model.BrandName).Titled(translateItems[LanguageKeys.Brand]);
                                                    columns.Add(model => model.Model).Titled(translateItems[LanguageKeys.Model]);
                                                    columns.Add(model => model.Delivery).Titled(translateItems[LanguageKeys.Delivery]);
                                                                //columns.Add(model => model.ShipmentDetails).Titled(translateItems[LanguageKeys.ShipmentDetails]);
                                                                columns.Add(model => model.AllocatedTo).Titled(translateItems[LanguageKeys.AllocatedTo]);
                                                    columns.Add(model => model.RmaNumber).Titled(translateItems[LanguageKeys.RmaReference]);
                                                    columns.Add(model => model.WarrantyTypeText).Titled(translateItems[LanguageKeys.Warranty]);
                                                    columns.Add(model => model.LoginType).Titled(translateItems[LanguageKeys.LoginType]);
                                                    columns.Add(model => model.Cost).Titled(translateItems[LanguageKeys.Cost]);
                                                })
                                                .Empty(translateItems[LanguageKeys.NoRecodsAvaiable])
                                                .Filterable()
                                                .Sortable()
                                                .Pageable()
                            )
                            @*}*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-body">
            <div class="row row-space">
                <div class="col-sm-8 text-right @persianFont">
                    @Html.Raw(translateItems[LanguageKeys.TotalQuantity])
                </div>
                <div class="col-sm-4 has-feedback">
                    @Html.TextBoxFor(model => model.DispatchNote.Quantity, new { @class = "form-control", @id = "text-quantity", @readonly = "readonly" })
                </div>
            </div>
        </div>
    </div>
    <button type="submit" name="dispatch-note-save" class="hidden"></button>
</form>
<div class="modal fade" id="invoice-modal" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <span class="modal-title model-title-header">@Html.Raw(translateItems[LanguageKeys.Invoices])</span>
            </div>
            <div class="modal-body popup-grid-container">
                <div id="invoice-error" class="alert alert-danger hide">
                    <button type="button" id="close-invoice-error" class="close" aria-hidden="true">
                        &times;
                    </button>
                    <span class="glyphicon glyphicon-remove-circle red">
                    </span>
                    <span class="@persianFont">
                        @translateItems[LanguageKeys.ErrorFieldSelectionRequired]
                    </span>
                </div>
                <div id="invoice-partial"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" name="select-invoice" id="select-invoice">Select</button>
            </div>
        </div>
    </div>
</div>
<partial name="@WebConstants.ViewPage.Partial.ValidationSummary" model="@translateItems[LanguageKeys.ValidationFailureSummary]" />
