@using Microsoft.AspNetCore.Http
@using Nerve.Repository
@using Nerve.Common.Enums
@using System.Web

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Nerve : @ViewData["Title"]</title>
    <environment>
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        <link href="~/lib/bootstrap-datepicker/css/bootstrap-datepicker.css" rel="stylesheet" />

        <link rel="stylesheet" href="~/css/site.css" />
        <link rel="stylesheet" href="~/css/mvc-grid/mvc-grid.css" />
        <link href="~/css/color.css" rel="stylesheet" />
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap-datepicker.js"></script>
        <script src="~/lib/mvc-grid/mvc-grid.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>
    </environment>
    @RenderSection("Scripts", required: false)
    <script type="text/javascript">
        let ENTER_KEYCODE = 13;
        $(document).ready(function () {
            let height = screen.height;
            let layoutHeight = height ? height - 198 : 710;
            $("#content-body").attr('min-height', layoutHeight);
            $("li.menu-link-click").click(function () {
                let list = $(this).children("a").text();
            });
            raiseNotification('@Html.Raw(TempData[WebConstants.TempDataKeys.Notification])', true);
        });

        function checkNullOrEmpty(value) {
            return !value || value == "-1" || value.trim().length === 0;
        }

        function showSpinner() {
            $("#pageLoader").removeClass('hide');
        }

        function hideSpinner() {
            $("#pageLoader").addClass('hide');
        }

        function setCalender(selector, target) {
            $(selector).on("click", function () {
                $(target).datepicker('show');
                $(target).datepicker({
                    todayBtn: true,
                    autoClose: true,
                }).on('changeDate', function (e) {
                    var todayTime = e.date;
                    var month = formatDate(todayTime.getMonth() + 1);
                    var day = formatDate(todayTime.getDate());
                    var year = formatDate(todayTime.getFullYear());
                    let date = month + "/" + day + "/" + year;
                    $(this).datepicker('hide');
                    $(target).val(date);
                });
            });
        }

        function formatDate(value) {
            if (value && value.toString().length === 1)
                return "0" + value;
            return value;
        }

        function showNotification(title, message, type, timout) {
            raiseNotification({ 'autoDismissed': timout, 'title': title, 'message': message, 'type': type }, false);
        }

        function raiseNotification(notification, isConversionRequired) {
            if (!!notification) {
                var notifyJson = !!isConversionRequired ? JSON.parse(notification) : notification;
                let iconCss = '';
                let isShow = true;
                if (notifyJson) {
                    $("#notifyModalTitle").text('');
                    $("#notifyModalMessage").text('');
                    $("#notifyModalIcon").attr('class','');

                    switch (notifyJson.type) {
                        case @Convert.ToInt32(NotificationType.Error):
                            iconCss = 'glyphicon glyphicon-remove-circle red'
                            break;
                        case @Convert.ToInt32(NotificationType.Information):
                            iconCss = 'glyphicon glyphicon-info-sign-circle lightblue'
                            break;
                        case @Convert.ToInt32(NotificationType.Success):
                            iconCss = 'glyphicon glyphicon-ok-circle green'
                            break;
                        case @Convert.ToInt32(NotificationType.Warning):
                            iconCss = 'glyphicon glyphicon-warning-sign bg-yellow';
                            break;
                        default:
                            break;
                    }

                    //show popup
                    if (!!iconCss) {
                        iconCss = iconCss + " notification-icon";
                        $("#notifyModalTitle").text(notifyJson.title);
                        $("#notifyModalMessage").text(notifyJson.message);
                        $("#notifyModalIcon").addClass(iconCss);
                        $("#notifyModel").modal();
                    }
                }
            }
        }
    </script>
</head>
<body>
    @{
        var user = Newtonsoft.Json.JsonConvert
            .DeserializeObject<User>(Context.Session.GetString(WebConstants.SessionKeys.User));

        var menus = Newtonsoft.Json.JsonConvert
            .DeserializeObject<List<UserMenuAccess>>(Context.Session.GetString(WebConstants.SessionKeys.UserMenus));

        var menuId = Context.Session.GetInt32(WebConstants.SessionKeys.CurrentMenuId);
        var selectedUserMenu = new UserMenuAccess();
        var parentMenu = new UserMenuAccess();
        var userMenus = new Nerve.Web.ViewModels.MenuViewModel
        {
            CurrentMenuId = menuId ?? 0,
            Menus = menus
        };

        if (menuId > 0 && menus != null && menus.Any())
        {
            selectedUserMenu = menus.FirstOrDefault(x => x.Id == menuId);

            if (selectedUserMenu != null)
            {
                parentMenu = menus.FirstOrDefault(x => x.Id == selectedUserMenu.ParentMenuId);
            }
        }
    }
    <div class="main-container">
        <div class="modal fade" id="notifyModel" role="dialog">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <div>
                            <span class="modal-title model-title-header" id="notifyModalTitle">Modal Header</span>
                        </div>
                    </div>
                    <div class="modal-body">
                        <p id="notifyModalIcon"></p>
                        <div id="notifyModalMessage" class="notification-message"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="spinner hide" id="pageLoader">
            <div class="spinner-content">
                <img src="~/images/loading.gif" /> Loading...
            </div>
        </div>
        <img style="width:100%;height:100px;" src="~/images/banner.jpg" />
        <partial name="_Menus" for="@userMenus" />
        @if (selectedUserMenu != null && !string.IsNullOrEmpty(selectedUserMenu.MenuName))
        {
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" id="bread-crumb-list">
                    @if (parentMenu != null)
                    {
                        <li class="breadcrumb-item"><a href="#">@parentMenu.MenuName</a></li>
                    }
                    @if (selectedUserMenu != null)
                    {
                        <li class="breadcrumb-item active" aria-current="page">@selectedUserMenu.MenuName</li>
                    }
                </ol>
            </nav>
        }
        <div id="content-body" class="col-md-12">
            @RenderBody()
        </div>
        @*<div id="footer" class="footer">
                <footer>
                    <p>&copy; 2019 - Nerve</p>
                </footer>
            </div>*@
    </div>
</body>
</html>
